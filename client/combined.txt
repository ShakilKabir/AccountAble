<!-- hero.component.html -->

<div class="bg-custom-bg py-8">
    <div class="container mx-auto flex flex-col sm:flex-row items-center justify-between px-2">

        <div class="sm:w-2/5 text-center sm:text-left mb-10 sm:mb-0">
            <h1 class="text-5xl font-bold mb-6">Manage your money like a boss</h1>
            <p class="text-gray-600 mb-8">Create beautiful invoices, accept online payments, and make accounting easyâ€”all in one placeâ€”with Waveâ€™s suite of money tools.</p>
            <div class="flex flex-col space-y-4 w-full max-w-md">
                <input type="email" placeholder="Enter your mail" class="border border-gray-300 p-4 rounded-lg w-full shadow-sm bg-gray-100">
                <input type="password" placeholder="Enter your password" class="border border-gray-300 p-4 rounded-lg w-full shadow-sm bg-gray-100">
                <button class="bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-opacity-50 text-white px-4 py-2 rounded-lg w-full shadow-lg transform hover:scale-105 transition-transform">Create your free account</button>
            </div>
            <p class="text-gray-500 text-sm mt-6">By signing up, you are indicating that you have read and agree to the <a href="#" class="underline">Terms of Use</a> and <a href="#" class="underline">Privacy Policy</a>.</p>
        </div>
        
        <div class="sm:w-3/5 mt-10 sm:mt-0 flex justify-center">
            <img src="../../../assets/8644cee49a024474a43efae1bd07c81f.png" alt="Mockup Image" class="w-full max-w-3xl">
        </div>
    </div>
</div>
//hero.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-hero',
  templateUrl: './hero.component.html',
  styles: [
  ]
})
export class HeroComponent {

}
<!-- navbar.component.html -->

<nav class="bg-custom-bg p-4 shadow-md">
    <div class="container mx-auto flex justify-between items-center">
      <img src="../../../assets/Wave_logo_RGB.png" alt="Wave Logo" class="h-16 w-40">
      <div class="flex items-center">
        <span class="mr-4 text-gray-600">{{ userEmail }}</span>
        <div class="relative group">
          <button (click)="dropdownOpen = !dropdownOpen" class="flex items-center space-x-2 bg-blue-600 text-white px-3 py-2 rounded">
            <span>{{ userEmail }}</span>
            <span>â–¼</span>
          </button>
          <div [class.hidden]="!dropdownOpen" class="absolute right-0 mt-2">
            <button class="block w-full text-left px-4 py-2 hover:bg-gray-200" (click)="logout(); dropdownOpen = false">Logout</button>
          </div>
        </div>
      </div>
    </div>
  </nav>
  //navbar.component.html

import { Component, OnInit } from '@angular/core';
import { AuthService } from '../../services/auth.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-navbar',
  templateUrl: './navbar.component.html',
  styleUrls: []
})
export class NavbarComponent implements OnInit {
  userEmail: string = '';
  dropdownOpen: boolean = false;

  constructor(private authService: AuthService, private router: Router) {}

  ngOnInit(): void {
    this.userEmail = this.authService.currentUserValue?.email || '';
    console.log('Current user:', this.authService.currentUserValue);
    console.log('Email:', this.userEmail);
  }
  
  
  logout(): void {
    this.authService.logout();
    this.router.navigate(['/login']);
  }
}
<!-- transaction-form.component.html -->

<div [class.hidden]="!show" class="fixed top-0 left-0 w-full h-full flex justify-center items-center">
    
    <div class="bg-white rounded-lg p-8 w-11/12 max-w-3xl">
    <!-- Title based on the type -->
    <h2 class="text-2xl font-bold mb-4">{{ type === 'deposit' ? 'Add Income' : 'Add Expense' }}</h2>

    <!-- Form Structure -->
    <div>
        <!-- Date input -->
        <label class="block mb-2">Date</label>
        <input type="date" class="mb-4 border rounded w-full p-2" />

        <!-- Description -->
        <label class="block mb-2">Description</label>
        <input type="text" placeholder="Write a Description" class="mb-4 border rounded w-full p-2" />

        <!-- Account dropdown -->
        <label class="block mb-2">Account</label>
        <select class="mb-4 border rounded w-full p-2">
            <!-- ... accounts options here ... -->
        </select>
        
        <!-- Type -->
        <label class="block mb-2">Type</label>
        <select [(ngModel)]="type" class="mb-4 border rounded w-full p-2">
            <option value="deposit">Deposit</option>
            <option value="withdrawal">Withdrawal</option>
        </select>

        <!-- Amount -->
        <label class="block mb-2">Amount</label>
        <input type="number" placeholder="0" class="mb-4 border rounded w-full p-2" />
        
        <!-- Other inputs similar to the provided image -->
        
        <!-- Save and Cancel Buttons -->
        <div class="mt-6 flex justify-end">
            <button class="py-2 px-4 bg-gray-300 text-black rounded mr-2" (click)="onClose()">Cancel</button>
            <button class="py-2 px-4 bg-green-500 text-white rounded" *ngIf="type === 'deposit'">Save</button>
            <button class="py-2 px-4 bg-red-500 text-white rounded" *ngIf="type === 'withdrawal'">Save</button>
        </div>

    </div>
</div>

    </div>// transaction-form.component.ts

import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-transaction-form',
  templateUrl: './transaction-form.component.html'
})
export class TransactionFormComponent implements OnInit {

  @Input() type: 'deposit' | 'withdrawal'= 'deposit'; // input to determine if it's a deposit or withdrawal
  @Input() show: boolean = false;
  @Output() close = new EventEmitter<void>(); // emit an event to close the modal

  constructor() { }

  ngOnInit(): void {
  }

  onClose(): void {
    this.close.emit();
  }

}
//auth.guard.ts
import { Injectable } from '@angular/core';
import { Router, CanActivate } from '@angular/router';
import { AuthService } from '../services/auth.service';

@Injectable({ providedIn: 'root' })
export class AuthGuard implements CanActivate {
  constructor(
    private router: Router,
    private authService: AuthService
  ) {}

  canActivate(): boolean {
    if (this.authService.currentUserValue) {
      // if authenticated, redirect to dashboard
      return true;
    } else {

      // if not authenticated, redirect to login page
      this.router.navigate(['/login']);
      return false;
    }
  }
}
<!-- dashboard.component.html -->

<div class="flex h-screen bg-white">
    <!-- Sidebar -->
    <div class="w-64 p-6 bg-blue-600 text-white">
      <!-- Logo/Brand -->
      <h1 class="text-2xl font-bold mb-4">wave</h1>
  
      <!-- Menu Items -->
      <ul class="space-y-4">
        <li>
          <a href="#" class="flex items-center space-x-3 text-white hover:bg-blue-500 p-2 rounded">
            <span>ðŸ“„</span>
            <span>Create new</span>
          </a>
        </li>
        <!-- ... Repeat for other menu items ... -->
      </ul>
  
      <!-- Accept credit cards & bank payments section -->
      <div class="mt-10 border-t border-gray-700 pt-4">
        <h2 class="text-white text-lg mb-2">Accept credit cards & bank payments</h2>
        <a href="#" class="text-blue-400 hover:underline">Set up now ></a>
      </div>
    </div>
  <!-- Main Content -->
  <div class="flex-1 p-10">
    <!-- Header section with Welcome and Create a new dropdown -->
    <div class="flex justify-between items-center mb-6">
      <div>
        <h2 class="text-2xl font-bold">Dashboard</h2>
        <p>Welcome to Wave! ...</p>
      </div>
      <div class="relative">
        <button class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Create a new â–¼</button>
        <!-- Dropdown content can be added here -->
      </div>
    </div>

    <!-- Middle content section -->
    <div class="grid grid-cols-2 gap-6">
      <!-- Left content -->
      <div>
        <!-- Basics box -->
        <div class="bg-white p-6 rounded shadow-md">
          <h3 class="text-xl font-bold mb-4">The basics</h3>
          <!-- ... Add the items for this box ... -->
        </div>
        <!-- ... Repeat for other boxes ... -->
      </div>
      
      <!-- Right content -->
      <div>
        <!-- Brand your invoice box -->
        <div class="bg-white p-6 rounded shadow-md">
          <h3 class="text-xl font-bold mb-4">Brand your invoice</h3>
          <!-- ... Add the items for this box ... -->
        </div>
        <!-- ... Repeat for other boxes ... -->
      </div>
    </div>

    <!-- Bottom content section (Cash Flow) -->
    <div class="mt-10">
      <div class="bg-white p-6 rounded shadow-md">
        <!-- ... Add content for the Cash Flow section ... -->
      </div>
    </div>
  </div>
</div>
  //dashboard.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styles: [
  ]
})
export class DashboardComponent {

}
<!-- home.component.html -->

<app-hero></app-hero>//home.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styles: [
  ]
})
export class HomeComponent {

}
<!-- login-form.component.html -->

<div class="min-h-screen flex items-center justify-center bg-gray-100">
    <div class="w-full max-w-md bg-white p-8 rounded-xl shadow-md" [formGroup]="loginForm">
        <h2 class="text-2xl font-semibold mb-5 text-blue-600">Sign in</h2>
        <div class="mb-4">
            <label for="email" class="block text-sm font-medium text-gray-600 mb-2">Email</label>
            <input 
                type="text" 
                id="email" 
                formControlName="email" 
                placeholder="" 
                class="w-full px-3 py-2 border rounded-md outline-none focus:ring focus:border-blue-300" />
                <div *ngIf="loginForm.get('email')?.hasError('required') && loginForm.get('email')?.touched" class="text-red-500 mt-2">
                    Email is required.
                </div>
                <div *ngIf="loginForm.get('email')?.hasError('email') && loginForm.get('email')?.touched" class="text-red-500 mt-2">
                    Please enter a valid email address.
                </div>
                
        </div>
        <div class="mb-4">
            <label for="password" class="block text-sm font-medium text-gray-600 mb-2">Password</label>
            <input 
                type="password" 
                id="password" 
                formControlName="password" 
                placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢" 
                class="w-full px-3 py-2 border rounded-md outline-none focus:ring focus:border-blue-300" />
                <div *ngIf="loginForm.get('password')?.hasError('required') && loginForm.get('password')?.touched" class="text-red-500 mt-2">
                    Password is required.
                </div>
                
        </div>
        <div class="mb-4">
            <a href="#" class="text-sm text-blue-500 hover:underline">Forgot it?</a>
        </div>
        <button 
            type="submit" 
            class="w-full bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" (click)="onSubmit()">
            Sign in
        </button>
        <div class="mt-4 text-center">
            <p class="mt-2 text-sm">Don't have a Wave account yet? 
                <a [routerLink]="['/register']" class="text-blue-500 hover:underline cursor-pointer">Sign up now</a>.
            </p>            
        </div>
    </div>
</div>
//login-form.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth.service';

@Component({
  selector: 'app-login-form',
  templateUrl: './login-form.component.html'
})
export class LoginFormComponent implements OnInit {
  loginForm!: FormGroup;

  constructor(private formBuilder: FormBuilder,private authService: AuthService,private router: Router) { }

  ngOnInit(): void {
    this.loginForm = this.formBuilder.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', [Validators.required]]
    });
  }

  onSubmit() {
    if (this.loginForm.valid) {
      const { email, password } = this.loginForm.value;
      this.authService.login( email, password).subscribe(response => {
        // On successful login, navigate to dashboard or any protected route
        this.router.navigate(['/dashboard']);
        console.log(this.loginForm.value);
      }, error => {
        // Handle any errors, like incorrect email or password
      });
      this.loginForm.reset();
    }
  }
}
<!-- register-form.component.html -->

<div class="min-h-screen flex items-center justify-center bg-gray-100">
    <div class="w-full max-w-md bg-white p-8 rounded-xl shadow-md" [formGroup]="registerForm">
        <h2 class="text-2xl font-semibold mb-5 text-blue-600">Sign Up</h2>

        <div class="mb-4">
            <label for="email" class="block text-sm font-medium text-gray-600 mb-2">Email</label>
            <input 
                type="text" 
                id="email" 
                formControlName="email" 
                placeholder="" 
                class="w-full px-3 py-2 border rounded-md outline-none focus:ring focus:border-blue-300" />
        </div>

        <div class="mb-4">
            <label for="password" class="block text-sm font-medium text-gray-600 mb-2">Password</label>
            <input 
                type="password" 
                id="password" 
                formControlName="password" 
                placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢" 
                class="w-full px-3 py-2 border rounded-md outline-none focus:ring focus:border-blue-300" />
        </div>

        <div class="mb-4">
            <label for="confirmPassword" class="block text-sm font-medium text-gray-600 mb-2">Confirm Password</label>
            <input 
                type="password" 
                id="confirmPassword" 
                formControlName="confirmPassword" 
                placeholder="â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢â€¢" 
                class="w-full px-3 py-2 border rounded-md outline-none focus:ring focus:border-blue-300" />
        </div>
        <div *ngIf="registerForm.get('confirmPassword')?.hasError('notSame') && registerForm.get('confirmPassword')?.touched" class="text-red-500 mt-2">
            Passwords do not match.
        </div>
        
        <button 
            type="submit" 
            class="w-full bg-blue-600 text-white p-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" (click)="onSubmit()">
            Sign Up
        </button>
        <div class="mt-4 text-center">
            <p class="mt-2 text-sm">Already have a Wave account? 
                <a [routerLink]="['/login']" class="text-blue-500 hover:underline cursor-pointer">Sign in now</a>.
            </p>
        </div>
    </div>
</div>
//register-form.component.ts

import { Component, OnInit } from '@angular/core';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from 'src/app/services/auth.service';
import { ConfirmPasswordValidator } from 'src/app/validators/confirm-password.validator';

@Component({
  selector: 'app-register-form',
  templateUrl: './register-form.component.html',
})
export class RegisterFormComponent implements OnInit {
  registerForm!: FormGroup;

  constructor(private formBuilder: FormBuilder,private authService: AuthService,private router: Router) { }

  ngOnInit() {
    this.registerForm = this.formBuilder.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required],
      confirmPassword: ['', Validators.required]
    }, { validators: ConfirmPasswordValidator });
  }

  onSubmit() {
    if (this.registerForm.valid) {
      this.authService.register(this.registerForm.value).subscribe(response => {
        // On successful registration, navigate to login page or show a success message
        this.router.navigate(['/login']);
      }, error => {
        // Handle any errors from the backend, such as email already exists
      });
      console.log(this.registerForm.value);
      console.log('hello')
      this.registerForm.reset();
    }
  }
}
<!-- transactions.component.html -->

<div class="p-8 bg-gray-100 min-h-screen">

    <!-- Top Bar -->
    <div class="flex justify-between mb-6">
      <button class="py-2 px-4 bg-blue-500 text-white rounded">Import transactions</button>
      <span class="font-bold text-xl">Transactions</span>
      <button class="py-2 px-4 bg-blue-500 text-white rounded">Connect your bank</button>
    </div>
  
    <!-- Transaction Total and Actions -->
    <div class="flex justify-between mb-6">
      <span class="font-semibold text-lg">All accounts: $15,006.50</span>
      <div>
        <button class="py-2 px-4 bg-green-500 text-white rounded mr-2" (click)="toggleIncomeModal()">Add income</button>
        <button class="py-2 px-4 bg-red-500 text-white rounded mr-2" (click)="toggleExpenseModal()">Add expense</button>
        <button class="py-2 px-4 bg-blue-500 text-white rounded">Scan receipt</button>
        <!-- ... other buttons ... -->
      </div>
    </div>
  
    <!-- Transactions Table -->
    <table class="min-w-full bg-white border border-gray-300">
      <thead>
        <tr class="bg-gray-200">
          <th class="py-2 px-4 border-b">Date</th>
          <th class="py-2 px-4 border-b">Description</th>
          <th class="py-2 px-4 border-b">Account</th>
          <th class="py-2 px-4 border-b">Category</th>
          <th class="py-2 px-4 border-b">Amount</th>
          <th class="py-2 px-4 border-b">Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let transaction of transactions">
          <td class="py-2 px-4 border-b">{{ transaction.date }}</td>
          <td class="py-2 px-4 border-b">{{ transaction.description }}</td>
          <td class="py-2 px-4 border-b">{{ transaction.account }}</td>
          <td class="py-2 px-4 border-b">{{ transaction.category }}</td>
          <td class="py-2 px-4 border-b">{{ transaction.amount }}</td>
          <td class="py-2 px-4 border-b">
            <!-- Action buttons/icons here -->
          </td>
        </tr>
      </tbody>
    </table>
  
  </div>

  <app-transaction-form 
  *ngIf="showIncomeModal"  
  [show]="showIncomeModal"
  type="deposit"
  (close)="toggleIncomeModal()">
</app-transaction-form>

<app-transaction-form 
  *ngIf="showExpenseModal" 
  [show]="showExpenseModal"
  type="withdrawal"
  (close)="toggleExpenseModal()">
</app-transaction-form>
//transactions.component.ts

import { TransactionFormComponent } from './../../components/transaction-form/transaction-form.component';
import { Component, OnInit } from '@angular/core';


@Component({
  selector: 'app-transactions',
  templateUrl: './transactions.component.html',
})
export class TransactionsComponent implements OnInit {
  transactions = [
    { date: 'Oct 22, 2023', description: 'Write a Description', account: 'Cash on Hand', category: 'Uncategorized Expense', amount: '$0.00' },
    // ... add other transactions ...
  ];

  public showIncomeModal = false;
  public showExpenseModal = false;

  toggleIncomeModal() {
      this.showIncomeModal = !this.showIncomeModal;
  }

  toggleExpenseModal() {
      this.showExpenseModal = !this.showExpenseModal;
  }
  constructor() { }

  ngOnInit(): void {
  }
}
// auth.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({ providedIn: 'root' })
export class AuthService {
  private currentUserSubject: BehaviorSubject<any>;
  public currentUser: Observable<any>;
  
  // Assuming you're running your backend on localhost:3000, adjust as needed
  private API_URL: string = 'http://localhost:3000/api/auth';

  constructor(private http: HttpClient) {
    this.currentUserSubject = new BehaviorSubject<any>(JSON.parse(localStorage.getItem('currentUser')!));
    this.currentUser = this.currentUserSubject.asObservable();
  }

  public get currentUserValue(): any {
    return this.currentUserSubject.value;
  }

  login(email: string, password: string) {
    return this.http.post<any>(`${this.API_URL}/login`, { email, password })
      .pipe(map(user => {
        // store user details and jwt token in local storage
        if (user && user.token) {
          localStorage.setItem('currentUser', JSON.stringify(user));
          this.currentUserSubject.next(user);
        }
        return user;
      }));
  }

  logout() {
    // remove user from local storage
    localStorage.removeItem('currentUser');
    this.currentUserSubject.next(null);
  }

  register(user: any) {
    return this.http.post(`${this.API_URL}/register`, user);
  }
}
//confirm-password.validator.ts

import { FormGroup } from '@angular/forms';

export function ConfirmPasswordValidator(group: FormGroup): null | { notSame: boolean } {
  const password = group.get('password')?.value;
  const confirmPassword = group.get('confirmPassword')?.value;

  return password === confirmPassword ? null : { notSame: true };
}//app-routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { LoginFormComponent } from './pages/login-form/login-form.component';
import { RegisterFormComponent } from './pages/register-form/register-form.component';
import { DashboardComponent } from './pages/dashboard/dashboard.component';
import { AuthGuard } from './guards/auth.guard';
import { HomeComponent } from './pages/home/home.component';
import { TransactionsComponent } from './pages/transactions/transactions.component';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'login', component: LoginFormComponent },
  { path: 'register', component: RegisterFormComponent },
  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },
  { path: 'transactions', component: TransactionsComponent, canActivate: [AuthGuard] }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
<!-- app.component.html -->

<app-navbar></app-navbar>
<router-outlet></router-outlet>
import { TestBed } from '@angular/core/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(() => TestBed.configureTestingModule({
    imports: [RouterTestingModule],
    declarations: [AppComponent]
  }));

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have as title 'client'`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('client');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('.content span')?.textContent).toContain('client app is running!');
  });
});
//app.component.ts

import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'Accounting';
}
//app.module.ts

import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { LoginFormComponent } from './pages/login-form/login-form.component';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RegisterFormComponent } from './pages/register-form/register-form.component';
import { HttpClientModule } from '@angular/common/http';
import { DashboardComponent } from './pages/dashboard/dashboard.component';
import { NavbarComponent } from './components/navbar/navbar.component';
import { HomeComponent } from './pages/home/home.component';
import { HeroComponent } from './components/hero/hero.component';
import { TransactionsComponent } from './pages/transactions/transactions.component';
import { TransactionFormComponent } from './components/transaction-form/transaction-form.component';

@NgModule({
  declarations: [
    AppComponent,
    LoginFormComponent,
    RegisterFormComponent,
    DashboardComponent,
    NavbarComponent,
    HomeComponent,
    HeroComponent,
    TransactionsComponent,
    TransactionFormComponent,
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    ReactiveFormsModule,
    HttpClientModule,
    FormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
